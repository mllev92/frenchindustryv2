import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVR
import pickle
import plotly.express as px
import scipy.stats as stats
from scipy.stats import pearsonr
from scipy.stats import spearmanr
import statsmodels.api
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from io import StringIO
import requests
from io import BytesIO
import geopandas as gpd

dfent = pd.read_csv("base_etablissement_par_tranche_effectif.csv", sep = ",") 
dfgeo = pd.read_csv ("name_geographic_information.csv", sep = ",")
dfsal = pd.read_csv("net_salary_per_town_categories.csv", sep = ",")

st.title("üí∂ French Industry üí∂")
st.sidebar.title("Sommaire")
pages=["üëã Introduction","üîç Exploration des donn√©es", "üìä DataViz",'‚öôÔ∏è Pre-processing & üß† Mod√®les de Machine Learning',"üîÆ Pr√©dictions","üìåConclusion"]
page=st.sidebar.radio("‚¨áÔ∏è Aller vers", pages)
st.sidebar.markdown(
    """
    - **Cursus** : Data Analyst
    - **Formation** : Bootcamp
    - **Mois** : Jan.2024
    - **Groupe** : 
        - Yannick Lin
        - Manon P√©quillat
        - Margaux Polomack""")

# Page d'introduction
if page == pages[0] :
    # Pr√©sentation projet
    st.caption("""**Cursus** : Data Analyst
    | **Formation** : Bootcamp
    | **Mois** : Janvier 2024""")

    st.header("üëã Introduction")
    st.markdown("""<style>h3{color: #27dce0; font-size: 30px; /* Changez la couleur du titre h3 ici */}</style>""",unsafe_allow_html=True)
    st.markdown("""<style>body {background-color: #f4f4f4;</style>""",unsafe_allow_html=True)

    st.write("Notre projet porte sur l'analyse de la disparit√© des salaires en France et sur les crit√®res qui peuvent influencer son montant. Gr√¢ce √† nos pr√©dictions, nous vous donnerons alors les crit√®res qui vous permettra de l'augmenter.")
    st.write("")
    with st.expander("Commen√ßons"):
    # Question et options de r√©ponse
        question = "√Ä votre avis, comment gagner un salaire haut en France ?"
        options = [
            "En habitant en Ile de France ?",
            "En √©tant cadre sup√©rieur ?",
            "En √©tant un homme ?",
            "En ayant des enfants ?",
            "Toutes les r√©ponses !"
        ]

        # Affichage de la question et des options
        st.title("Comment bien gagner sa vie ?")
        st.write(question)
        reponse = st.radio("Choisissez une r√©ponse :", options, index=None)
        
        # Affichage du bouton pour soumettre la r√©ponse
        if reponse:
            # Affichage du message apr√®s avoir choisi une r√©ponse
            st.write("<div style='font-size: 30px; text-align: center';>ü•Å C'est ce que nous allons voir dans cette pr√©sentation ! ü•Å</div>", unsafe_allow_html=True)

# Page d'exploration des donn√©es
if page == pages[1] : 
    df_full = pd.read_csv("df_full.csv")
    df_full_ratio_commune = pd.read_csv("df_full_ratio_commune.csv")
    df_full_ratio_dept = pd.read_csv("df_full_ratio_dept.csv")
    st.header("üîç Exploration des Donn√©es")
    st.markdown(""" """ """<style>h3{color: #27dce0; font-size: 30px; /* Changez la couleur du titre h3 ici */}</style>""",unsafe_allow_html=True)
    st.markdown(""" """ """<style>body {background-color: #f4f4f4;</style>""",unsafe_allow_html=True)

    if st.button("Entreprises") :
        #Afficher le Dataset dfent
        st.subheader("Dataset sur la r√©partition des entreprises en fonction des communes fran√ßaises")
        st.write("**Voici les premi√®res lignes de ce jeu de donn√©es:**")
        st.dataframe(dfent.head())
        st.write("**Informations principales sur ce jeu de donn√©es:**")
        st.write("- Nombre de lignes:", dfent.shape[0])
        st.write("- Nombre de colonnes:", dfent.shape[1])
        st.write("- R√©sum√© statistique de tout le jeu de donn√©es :")
        st.dataframe(dfent.describe())
        st.write("")
        col1, col2 = st.columns([2,3])
        with col1 : 
            st.write("- Valeurs manquantes :", dfent.isnull().sum())
        with col2:
            st.write("- Informations :")
            info_str_io = StringIO()
            dfent.info(buf=info_str_io)
            info_str = info_str_io.getvalue()    
            st.text(info_str)
      
            st.write("")

    if st.button("Nom g√©ographique") :
        #Afficher le Dataset dfgeo
        st.subheader("Dataset sur les informations g√©ographiques des communes fran√ßaises")
        st.write("**Voici les premi√®res lignes de ce jeu de donn√©es:**")
        st.dataframe(dfgeo.head())
        st.write("**Informations principales sur ce jeu de donn√©es:**")
        st.write("- Nombre de lignes:", dfgeo.shape[0])
        st.write("- Nombre de colonnes:", dfgeo.shape[1])
        st.write("- R√©sum√© statistique de tout le jeu de donn√©es :")
        st.dataframe(dfgeo.describe())
        st.write("")
        col1, col2 = st.columns([2,3])
        with col1 : 
            st.write("- Valeurs manquantes :", dfgeo.isnull().sum())
        with col2:
            st.write("- Informations :")
            info_str_io = StringIO()
            dfgeo.info(buf=info_str_io)
            info_str = info_str_io.getvalue()    
            st.text(info_str)

        st.write("")

    if st.button("Salaires") :
        #Afficher le Dataset dfsal
        st.subheader("Dataset sur la r√©partition des salaires moyens en fonction des communes fran√ßaises et diff√©rentes caract√©ristiques")
        st.write("**Voici les premi√®res lignes de ce jeu de donn√©es:**")
        st.dataframe(dfsal.head())
        st.write("**Informations principales sur ce jeu de donn√©es:**")
        st.write("- Nombre de lignes:", dfsal.shape[0])
        st.write("- Nombre de colonnes:", dfsal.shape[1])
        st.write("- R√©sum√© statistique de tout le jeu de donn√©es :")
        st.dataframe(dfsal.describe())
        st.write("")
        col1, col2 = st.columns([2,3])
        with col1 : 
            st.write("- Valeurs manquantes :", dfsal.isnull().sum())
        with col2:
            st.write("- Informations :")
            info_str_io = StringIO()
            dfsal.info(buf=info_str_io)
            info_str = info_str_io.getvalue()    
            st.text(info_str)

        st.write("")

    if st.button("Population") :
        #Afficher le Dataset dfent
        dfpop_light = pd.read_csv("dfpop_light.csv")
        dfpop_light["CODGEO"]=dfpop_light["CODGEO"].astype(str)
        dfpop_missing_values = pd.read_csv("dfpop_missing_values.csv")
        dfpop_describe = pd.read_csv("dfpop_describe.csv")

        st.subheader("Dataset sur les caract√©ristiques de la population en fonction des communes fran√ßaises")
        st.write("**Voici les premi√®res lignes de ce jeu de donn√©es:**")
        st.dataframe(dfpop_light)
        nb_lignes_pop = 8536584
        nb_col_pop = 7
        st.write("**Informations principales sur ce jeu de donn√©es:**")
        st.write("- Nombre de lignes:", nb_lignes_pop)
        st.write("- Nombre de colonnes:", nb_col_pop)
        st.write("- R√©sum√© statistique de tout le jeu de donn√©es :")
        st.dataframe(dfpop_describe)
        st.write("")
        col1, col2 = st.columns([2,3])
        with col1 : 
            st.write("- Valeurs manquantes :", dfpop_missing_values)
        with col2:
            st.write("- Informations :")
            st.image("popinfo.png")

        st.write("")



# Page de Datavisualisation
if page == pages[2] :
    
    df_full = pd.read_csv("df_full.csv")
    df_full_ratio_commune = pd.read_csv("df_full_ratio_commune.csv")
    df_full_ratio_dept = pd.read_csv("df_full_ratio_dept.csv")
    st.markdown("""<style>h3{color: #27dce0; font-size: 30px; /* Changez la couleur du titre h3 ici */}</style>""",unsafe_allow_html=True)
    st.markdown("""<style>body {background-color: #f4f4f4;</style>""",unsafe_allow_html=True)

    st.header("üìä Data Visualisation")
    # Distribution du salaire moyen
    st.subheader("1. Distribution du salaire moyen")
    fig = px.histogram(dfsal, x='SNHM14', nbins=10, marginal='box', color_discrete_sequence=px.colors.sequential.Viridis, labels={'SNHM14': 'Salaire horaire net moyen'})
    fig.update_layout(title="Distribution du salaire moyen avec boxplot",
                    xaxis_title="Salaire horaire net moyen",
                    yaxis_title="Fr√©quence",
                    showlegend=False)
    st.plotly_chart(fig)

    st.write("")

    st.markdown("Nous pouvons voir que le montant horaire du salaire moyen en France se situe entre 10 et 15‚Ç¨. Les salaires moyen sup√©rieurs √† 18/20‚Ç¨ sont faibles et ressortent comme outliers dans le boxplot.")

    st.write("")
    st.write("")
    st.write("")

    st.subheader("2. R√©partition des entreprises et des salaires en fonction des r√©gions fran√ßaises")
  
    # Regroupement du nombre d'entreprises en fonction de la r√©gion
    dfent_REG = df_full.groupby("REG").agg({"E14TST":"sum", "nom_r√©gion":"max"}).reset_index(drop=False)
    dfent_REG.columns = ["REG", "nombre_entreprises", "nom_r√©gion"]
    geo_region = gpd.read_file('regions.geojson')
    # Carte de la r√©partition des entreprises par r√©gions
    fig = px.choropleth(dfent_REG, 
                    geojson=geo_region, 
                    locations="nom_r√©gion", 
                    featureidkey="properties.nom",  
                    color="nombre_entreprises",
                    hover_name="nom_r√©gion",
                    title="Nombre d'entreprises par r√©gion en France",
                    color_continuous_scale=px.colors.sequential.Viridis)
    
    # Ajuste la vue pour la France
    fig.update_geos(fitbounds="locations", visible=False,projection_scale=5)  
    #fig.update_layout(height=800, width=1000)
    st.plotly_chart(fig)

    st.write("")

    # Graphique de la r√©partition du nombre d'entreprises par r√©gions
    fig = px.bar(dfent_REG, x='nom_r√©gion', y='nombre_entreprises', title="R√©partition du nombre d'entreprises par r√©gions", color='nom_r√©gion', color_discrete_sequence=px.colors.sequential.Viridis, labels={'nombre_entreprises': "Nombre d'entreprises"})
    fig.update_layout(xaxis_title="R√©gions", yaxis_title="Nombre d'entreprises", showlegend=False)
    fig.update_xaxes(tickangle=45)

    # Afficher les graphiques
    st.plotly_chart(fig)

    # Graphique des salaires moyens par r√©gions
    fig = px.box(df_full.sort_values(by="REG"), x='nom_r√©gion', y='SNHM14', title='Salaires moyens par r√©gions', color='nom_r√©gion', color_discrete_sequence=px.colors.sequential.Viridis, labels={'SNHM14': 'Salaire Moyen'})
    fig.update_layout(xaxis_title="R√©gions", yaxis_title="Salaire Moyen", showlegend=False)
    fig.update_xaxes(tickangle=45)

    # Afficher les graphiques
    st.plotly_chart(fig)

    st.write("")

    paragraph = ("Nous constatons que la r√©gion Ile-de-France comporte le plus grand nombre d‚Äôentreprises. "
             "Nous remarquons que la r√©partition des entreprises en France est tr√®s in√©gale avec une concentration de celles-ci en Ile-de-France. "
             "Ensuite, ce sont les r√©gions Auvergne-Rh√¥ne-Alpes et Provence-C√¥te d‚ÄôAzur qui suivent. "
             "La r√©gion comptant le moins d‚Äôentreprises est la Corse. <br>"
             "La r√©partition des salaires est √©galement in√©gale. En effet, la r√©gion Ile-de-France compte les communes disposant des plus hauts salaires avec un salaire m√©dian de 16‚Ç¨/h alors que les autres r√©gions disposent des m√©dianes autour de 12.5‚Ç¨/h. "
             "Nous pouvons aussi constater que la r√©gion Auvergne-Rh√¥ne-Alpes poss√®de des communes avec des salaires moyens tr√®s √©lev√©s.")

    st.markdown(paragraph, unsafe_allow_html=True)
    st.write("")
    st.write("")
    st.write("")

    st.subheader("3. R√©partition des entreprises et des salaires en fonction des d√©partements fran√ßais")

    # Regroupement du nombre d'entreprises en fonction du d√©partement
    df_DEP = df_full.groupby("DEP").agg({"nom_d√©partement":"max", "REG":"max","E14TST":"sum", "SNHM14" : ["mean","min","max"]}).reset_index(drop=False)
    df_DEP.columns = ["DEP", "nom_d√©partement", "REG", "Nombre_entreprises", "salaire moyen", "salaire min","salaire max"]
    
    # Carte de la r√©partition des entreprises par d√©partements
    fig = px.choropleth(df_DEP, 
                        geojson=gpd.read_file("departements.geojson"), 
                        locations="nom_d√©partement", 
                        featureidkey="properties.nom",  
                        color="Nombre_entreprises",
                        hover_name="nom_d√©partement",
                        title="Nombre d'entreprises par d√©partements fran√ßais",
                        color_continuous_scale=px.colors.sequential.Viridis)

    fig.update_geos(fitbounds="locations", visible=False,projection_scale=5)  # Ajuste la vue pour la France
    #fig.update_layout(height=800, width=1000)
    st.plotly_chart(fig)

    st.write("")

    # Carte de la r√©partition du salaire moyen par d√©partements
    fig = px.choropleth(df_DEP, 
                        geojson=gpd.read_file("departements.geojson"), 
                        locations="nom_d√©partement", 
                        featureidkey="properties.nom",  
                        color="salaire moyen",
                        hover_name="nom_d√©partement",
                        title="Salaire moyen par d√©partements fran√ßais",
                        color_continuous_scale=px.colors.sequential.Viridis)

    fig.update_geos(fitbounds="locations", visible=False,projection_scale=5)  # Ajuste la vue pour la France
    #fig.update_layout(height=800, width=1000)
    st.plotly_chart(fig)

    # Graphique de la r√©partition du nombre d'entreprises et des salaires en IDF
    df_idf = df_DEP[df_DEP["REG"] == 11]
    # Cr√©ation du graphique pour l'√éle-de-France (Barplot)
    fig = px.bar(df_idf, x='nom_d√©partement', y='Nombre_entreprises', title='Nombre d\'entreprises en IDF', text='Nombre_entreprises', color='DEP', color_discrete_sequence=px.colors.sequential.Viridis, labels={'DEP' : 'd√©partement'})
    fig.update_layout(xaxis_title="D√©partements", yaxis_title="Nombre d'entreprises", showlegend=False)
    # Afficher les graphiques
    st.plotly_chart(fig)

    # Cr√©ation du graphique pour l'√éle-de-France (Boxplot)
    df_idf_box = df_full[df_full["REG"]==11]
    fig = px.box(df_idf_box, x='nom_d√©partement', y='SNHM14', title='Salaires moyens en IDF', color='DEP', color_discrete_sequence=px.colors.sequential.Viridis, labels={'DEP' : 'd√©partement'})
    fig.update_layout(xaxis_title="D√©partements", yaxis_title="Salaire Moyen", showlegend=False)
    # Affichage des graphiques
    st.plotly_chart(fig)

    st.write("")

    # Graphique de la r√©partition du nombre d'entreprises et des salaires en PACA
    df_paca = df_DEP[df_DEP["REG"] == 93]
    # Cr√©ation du graphique pour la PACA (Barplot)
    fig = px.bar(df_paca, x='nom_d√©partement', y='Nombre_entreprises', title='Nombre d\'entreprises en PACA', text='Nombre_entreprises', color='DEP', color_discrete_sequence=px.colors.sequential.Viridis, labels={'DEP' : 'd√©partement'})
    fig.update_layout(xaxis_title="D√©partements", yaxis_title="Nombre d'entreprises", showlegend=False)
    # Afficher les graphiques
    st.plotly_chart(fig)

    # Cr√©ation du graphique pour la PACA (Boxplot)
    df_paca_box = df_full[df_full["REG"]==93]
    fig = px.box(df_paca_box, x='nom_d√©partement', y='SNHM14', title='Salaires moyens en PACA', color='DEP', color_discrete_sequence=px.colors.sequential.Viridis, labels={'DEP' : 'd√©partement'})
    fig.update_layout(xaxis_title="D√©partements", yaxis_title="Salaire Moyen", showlegend=False)
    # Affichage des graphiques
    st.plotly_chart(fig)

    st.write("")

    # Graphique de la r√©partition du nombre d'entreprises et des salaires en ARA
    df_ara = df_DEP[df_DEP["REG"] == 84]
    # Graphique pour l'Auvergne-Rh√¥ne-Alpes (Barplot)
    fig = px.bar(df_ara, x='nom_d√©partement', y='Nombre_entreprises', title='Nombre d\'entreprises en Auvergne-Rh√¥ne-Alpes',text='Nombre_entreprises', color='DEP', color_discrete_sequence=px.colors.sequential.Viridis, labels={'DEP' : 'd√©partement'})
    fig.update_layout(xaxis_title="D√©partements", yaxis_title="Nombre d'entreprises", showlegend=False)
    # Afficher les graphiques
    st.plotly_chart(fig)

    # Graphique pour l'Auvergne-Rh√¥ne-Alpes (Boxplot)
    df_ara_box = df_full[df_full["REG"]==84]
    fig = px.box(df_ara_box, x='nom_d√©partement', y='SNHM14', title="Salaires moyens en Auvergne-Rh√¥ne-Alpes",color='DEP', color_discrete_sequence=px.colors.sequential.Viridis, labels={'DEP' : 'd√©partement'})
    fig.update_layout(xaxis_title="D√©partements", yaxis_title="Salaire Moyen", showlegend=False)
    # Afficher les graphiques
    st.plotly_chart(fig)

    st.write("")   

    st.markdown("""
        Nous constatons que la localisation a un impact sur le salaire moyen.\n 
        - En effet, en Ile-de-France (IDF), nous remarquons que la quasi-totalit√©  des entreprises se situent dans la capitale (Paris - 75).\n 
        - En Provence-Alpes-C√¥te d‚ÄôAzur (PACA), la r√©partition des entreprises est tr√®s h√©t√©rog√®ne avec une concentration des entreprises dans les d√©partements avec les villes de Marseille (13) et de Nice (06).\n 
        - En Auvergne-Rh√¥ne-Alpes (ARA), nous remarquons que le d√©partement de Lyon (69) concentre une grande partie des entreprises. Mais la r√©gion dispose aussi d‚Äôautres d√©partements qui attirent les entreprises avec le Puy-de-D√¥me (63), l‚ÄôIs√®re (38) et la Loire (42) qui rassemblent plus de 10 000 entreprises.\n 
                """)
    
    st.write("")
    st.write("")
    st.write("")

    st.subheader("4. Comparaison des salaires entre les hommes et les femmes en France")
    # Cr√©er la figure avec deux subplots c√¥te √† c√¥te
    fig = make_subplots(rows=1, cols=2, subplot_titles=['Salaire moyen hommes', 'Salaire moyen femmes'])
    # Boxplot pour le salaire moyen des hommes
    fig1 = px.box(df_full, y='SNHMH14', color_discrete_sequence=['#440154'])
    fig1.update_layout(yaxis_title='Salaire moyen hommes', yaxis_range=[9, 50])
    # Ajouter le premier graphique √† la premi√®re colonne du subplot
    fig.add_trace(fig1.data[0], row=1, col=1)
    # Boxplot pour le salaire moyen des femmes
    fig2 = px.box(df_full, y='SNHMF14', color_discrete_sequence=['#21918C'])
    fig2.update_layout(yaxis_title='Salaire moyen femmes', yaxis_range=[9, 50])
    # Ajouter le deuxi√®me graphique √† la deuxi√®me colonne du subplot
    fig.add_trace(fig2.data[0], row=1, col=2)
    # Ajuster la figure
    fig.update_layout(height=500, width=800, showlegend=False)
    fig.update_yaxes(range=[9, 50], row=1, col=2)
    fig.update_yaxes(range=[9, 50], row=1, col=1)
    # Afficher la figure
    st.plotly_chart(fig)

    st.write("")   

    st.markdown("Nous remarquons une in√©galit√© des salaires moyens selon le sexe de l‚Äôindividu. Les femmes ont des salaires globalement plus faibles que les hommes.")
    
    st.write("")
    st.write("")
    st.write("")

    st.subheader("5. Corr√©lations sur le salaire moyen")

    # S√©lectionner les colonnes pour la matrice de corr√©lation
    columns = ["salaire_moyen", "IDF", "densite_commune", "ent_total", 
            "ratio_TPE", "ratio_PME", "ratio_ETI_GE", "ratio_autre_ent", 
            "pop_totale", "age_moyen",
            "ratio_homme", "ratio_femme",
            "ratio_enfant", "ratio_jeune_actif", "ratio_actif", "ratio_senior_actif", "ratio_senior", 
            "ratio_solo", "ratio_e2p", "ratio_ase", "ratio_e1p", "ratio_ac", "ratio_ace", "ratio_str"]
    # Cr√©er la matrice de corr√©lation
    correlation_matrix = df_full_ratio_commune[columns].corr()
    # Cr√©er la heatmap avec Plotly Express
    fig = px.imshow(correlation_matrix,
                    labels=dict(color="Corr√©lation"),
                    x=columns,
                    y=columns,
                    color_continuous_scale="Viridis")
    # Mise en page et affichage de la figure
    fig.update_layout(title="Matrice de corr√©lation des ratios √† l'√©chelle de la commune",
                    width=800, height=800)
    st.plotly_chart(fig)

    st.write("")

    st.markdown("""
                Les corr√©lations sont assez faibles entre le salaire moyen et les variables explicatives.  \n 
                Les variables les plus corr√©l√©es positivement sont : 
                - la pr√©sence de la commune en Ile-de-France (IDF) 
                - la repr√©sentation des foyers vivant en couple avec enfant (ratio_ace) 
                - la repr√©sentation de personnes entre 35 et 55 ans (ratio_actif)
                - la repr√©sentation d'enfants vivant avec leurs deux parents (ratio_e2p)
                - la densit√© de la commune (densite_commune).
                 \n 
                Les variables plut√¥t corr√©l√©es n√©gativement sont : la pr√©sence d‚Äôune grande proportion de tr√®s petites entreprises (ratio_ETI_GE) ; et de personnes habitant seules (ratio_solo).
                 \n 
                Comme le d√©partement semble avoir la plus grande importance dans nos corr√©lations, nous d√©cidons de regrouper notre jeu de donn√©es par d√©partement et d‚Äôobserver une nouvelle matrice de corr√©lation. Cette fois, nous ajoutons de nouvelles donn√©es :
                - la densit√© exacte du d√©partement (densite)
                - le taux de ch√¥mage (chomage)
                - la part de jeunes dipl√¥m√©s sur le march√© du travail (part_jeunedip_pas_etudes)
                - la part de jeunes non dipl√¥m√©s (part_1624_pas_etudes).
                    """)

    st.write("")
    st.write("")
    st.write("")

    # Cr√©er la matrice de corr√©lation
    correlation_matrix_full_dept = df_full_ratio_dept[["salaire_moyen", "ent_total", "pop_totale", "densite","ratio_TPE", "ratio_PME", "ratio_ETI_GE","ratio_homme", "ratio_femme","ratio_enfant", "ratio_jeune_actif", "ratio_actif", "ratio_senior_actif", "ratio_senior","ratio_solo", "ratio_e2p", "ratio_ase", "ratio_e1p", "ratio_ac", "ratio_ace", "ratio_str","part_1624_pasetudes", "part_jeunedip_pasetudes", "chomage"]].corr()
    # Cr√©er une figure heatmap avec Plotly Express
    fig = px.imshow(correlation_matrix_full_dept,
                    labels=dict(color="Corr√©lation"),
                    color_continuous_scale='Viridis')
    # Ajouter des annotations et affichage de la figure
    fig.update_layout(
        title="Matrice de corr√©lation des ratios √† l'√©chelle du d√©partement",
        xaxis=dict(title="Variables"),
        yaxis=dict(title="Variables"),
        coloraxis_colorbar=dict(title="Corr√©lation"),
        width=800, height=800
    )
    st.plotly_chart(fig)

    st.write("")

    st.markdown("""
                Les corr√©lations sont beaucoup plus marqu√©es.  \n 
                Les variables les plus corr√©l√©es positivement sont : la part de jeunes dipl√¥m√©s sur le march√© du travail, le nombre d'entreprises, la population totale, la repr√©sentation des 25-35 ans, la densit√©.  \n  
                Les variables plut√¥t corr√©l√©es n√©gativement sont : la part de 55-60 ans, les plus de 60 ans et les tr√®s petites entreprises.
                    """)

    st.write("")
    st.write("")
    st.write("")


# Pr√©sentation de la mod√©lisation

if page == pages[3] :


    df1 = pd.read_csv("df_ratio.csv", index_col="CODGEO")
    df2 = pd.read_csv("df_full_cadre_tertiaire.csv", index_col="CODGEO")
    df3 = pd.read_csv("df_full_cadre_tertiaire_tag_dep.csv", index_col="CODGEO")
    df4 = pd.read_csv("df_cat_poste.csv", index_col="CODGEO")
    st.header("‚öôÔ∏è Pre-processing & üß† Mod√®les de Machine Learning")
    st.markdown("""<style>h3{color: #27dce0; font-size: 30px; /* Changez la couleur du titre h3 ici */}</style>""",unsafe_allow_html=True)
    st.markdown("""<style>body {background-color: #f4f4f4;</style>""",unsafe_allow_html=True)

    
    st.subheader("Objectif")
    st.write("Pr√©dire le salaire moyen d'une personne (variable continue) en fonction des donn√©es contenues dans les variables explicatives qui le composent.")
    
    st.write("")
    st.write("")

    if st.button("Mod√®les de r√©gression") :
        st.subheader("Choix des mod√®les")
        st.markdown("""
                    Afin de pr√©dire le salaire moyen, nous avons √©tudi√© la performance de plusieurs mod√®les de machine learning :
                    - R√©gression lin√©aire
                    - Ridge
                    - Lasso
                    - Elastic Net
                    - KNN
                    - Decision Tree
                    - Random Forest
                    - SVR.

                    Ces mod√®les ont √©t√© appliqu√©s √† 4 Dataframes issus de pr√©-processing diff√©rent afin de comparer les r√©sultats et de d√©terminer le meilleur mod√®le.
        """)

        st.write("")
        st.write("")

    # Pr√©sentation du jeu de mod√©lisation n¬∞1
        
    if st.button("Choix du jeu de mod√©lisation"):
        st.markdown("""
                    Nous avons utilis√© 4 DataFrames diff√©rents pour appliquer nos mod√®les de machine learning.
                    """)        
        st.image('pre-process.png', use_column_width=True)
        
        st.subheader("Jeu de mod√©lisation n¬∞1")
        st.markdown("""
                    Ce DataFrame a √©t√© cr√©√© √† partir des donn√©es fournies pour le projet et avec les variables (ensemble de ratios sur la population et les entreprises) cr√©√©es lors de l‚Äôinitialisation des matrices de corr√©lation
                    """)
        st.write("")
        st.write("")
        st.dataframe(df1.head())

        st.markdown("#### Tableau global des r√©sultats")
        result1 = pd.read_csv("result_model1.csv", index_col = 1)

        result1.drop(columns=result1.columns[0], axis=1, inplace=True)

        st.dataframe(result1)

        st.markdown("""
                    #### Interpr√©tation


                    On constate des R¬≤ plut√¥t faibles (autour de 0.4, voire 0.2) ou du sur apprentissage lorsque le R¬≤ est meilleur (pour Random Forest et SVR).  
                    
                    
                    La MSE sur l‚Äôensemble de test est assez √©lev√©e. La RMSE de test, √† son minimum est √† 1.36 (donc un √©cart moyen de 1.36‚Ç¨ sur le salaire moyen horaire pr√©dit).  
                    
                    
                    Pour ce premier jeu de mod√©lisation, on peine donc √† trouver un ‚Äúmeilleur‚Äù mod√®le. Nous souhaitons donc am√©liorer notre jeu de donn√©es.  
                    """)
        st.write("")
        st.write("")


    # Pr√©sentation du jeu de mod√©lisation n¬∞2
        
        st.subheader("Jeu de mod√©lisation n¬∞2")
        st.markdown("""
                    Sur la base du DataFrame pr√©c√©dent, nous avons ajout√© :
                    - La proportion de cadre par commune en 2020
                    - La proportion de personnes travaillant dans le tertiaire par commune en 2020

                    """)
        st.write("")
        st.write("")
        st.dataframe(df2.head())

        st.markdown("#### Tableau global des r√©sultats")
        # Insertion du dataframe r√©sultats

        result2 = pd.read_csv("result_model2.csv", index_col = 1)

        result2.drop(columns=result2.columns[0], axis=1, inplace=True)
        st.dataframe(result2)

        st.markdown("""
                    #### Interpr√©tation
                    Les mod√®les KNN et SVR semblent les plus int√©ressants (les √©carts entre R¬≤ train et R¬≤ test sont les plus faibles, tout en √©tant proche de 1). Les √©carts de pr√©dictions (RMSE respectivement √† 1.28 et 1.11).
                    
                    
                    Le Random Forest a une RMSE faible mais l‚Äô√©cart entre les valeurs de R¬≤ t√©moignent d‚Äôun surapprentissage.
                    
                    
                    Afin d'affiner ces r√©sultats, nous effectuons un GridSearch pour √©valuer les meilleurs param√®tres √† passer pour chacun de ces mod√®les.

                    """)
        st.write("")
        st.write("")

        st.markdown("#### R√©sultats apr√®s Gridsearch")
        # Insertion r√©sultat gridsearch
        data = {
        'Model': ['KNN', 'SVR'],
        'R2_train': [0.859765, 0.885198],
        'R2_test': [0.681018, 0.802175],
        'R2_full': [0.815537,0.864396],
        'MAE_train': [0.628312, 0.772503],
        'MAE_test': [0.934093, 1.180191],
        'MSE_train': [0.912875, 0.476711],
        'MSE_test': [2.114212, 0.663887],
        'RMSE_train': [0.955445, 0.878921],
        'RMSE_test': [1.454033, 1.086366]
                }
        
        tab = pd.DataFrame(data)
        tab.set_index('Model', inplace = True)
        st.dataframe(tab)

        st.markdown("""
                    Le mod√®le KNN a un surapprentissage beaucoup trop important. Le mod√®le SVR a une meilleure erreur quadratique, sans pour autant perdre la qualit√© de son √©cart entre r2 train et test.

                    
                    Est-il possible d‚Äôam√©liorer nos scores avec l‚Äôajout d‚Äôune donn√©e sur le d√©partement d‚Äôappartenance (comme pour l‚Äôappartenance √† la r√©gion Ile-de-France) ?


                    """)
        st.write("")
        st.write("")


    # Pr√©sentation du jeu de mod√©lisation n¬∞3

        st.subheader("Jeu de mod√©lisation n¬∞3")
        st.markdown("""
                    Sur base du DataFrame pr√©c√©dent, nous avons ajout√© une colonne par d√©partement encod√© selon si la commune fait partie (1) ou non (0) √† ce d√©partement (OneHotEncoder).
                            
                            """)

        st.write("")
        st.write("")
        st.dataframe(df3.head())

        st.markdown("#### Tableau global des r√©sultats")
        # Insertion du dataframe r√©sultats
        result3 = pd.read_csv("result_model3.csv", index_col = 1)

        result3.drop(columns=result3.columns[0], axis=1, inplace=True)

        st.dataframe(result3)

        st.markdown("""
                    #### Interpr√©tation
                    Les r√©sultats ne sont pas sensiblement meilleurs. Le SVR a un plus grand surapprentissage que le jeu de donn√©es pr√©c√©dent, sans pour autant am√©liorer l‚Äôerreur quadratique.
                    """)
        st.write("")
        st.write("")


    # Pr√©sentation du jeu de mod√©lisation n¬∞4
        
        st.subheader("Jeu de mod√©lisation n¬∞4")
        st.markdown("""
                    Ce 4e DataFrame a √©t√© cr√©√© depuis le fichier net_salary.csv fourni pour le projet. Les colonnes ont √©t√© pivot√© afin de cat√©goriser le salaire moyen selon le genre et la cat√©gorie de poste :
                    - genre = 1 : femme / 2 : homme
                    - cat_poste = 1 : travailleur(euse) / 2 : employ√©(e) / 3 : cadre moyen / 4 : cadre

                    """)
        st.write("")
        st.write("")
        st.dataframe(df4.head())

        st.markdown("#### Tableau global des r√©sultats")
        # Insertion du dataframe r√©sultats
        result4 = pd.read_csv("result_model4.csv", index_col = 1)

        result4.drop(columns=result4.columns[0], axis=1, inplace=True)

        st.dataframe(result4)

        st.markdown("""
                    #### Interpr√©tation
                    On note un R¬≤ de test sup√©rieur au R¬≤ train sur le mod√®le SVR. Cependant, les valeurs des RMSE de test sont moins int√©ressantes que sur le DataFrame n¬∞2.

                    
                    Il est int√©ressant de noter que pour SVR, nous avons un DataFrame de grandeur optimale d‚Äôapr√®s la courbe d‚Äôapprentissage. 

                    
                    Le mod√®le SVR offre les meilleurs r√©sultats. Si on analyse de plus pr√®s le graphique de dispersions des r√©sidus de ce mod√®le, on constate de nombreux r√©sidus avec une valeur parfois sup√©rieure √† 5, ce qui est tr√®s important pour un salaire horaire.

                    """)
        st.write("")
        st.write("")
    
        st.subheader("Mod√®le le plus performant")
        st.markdown("""
                    #### ü•á Jeu de mod√©lisation n¬∞2 avec le mod√®le SVR
                    """)
        st.markdown("""
                    En conclusion, le jeu de donn√©es avec la proportion de cadre semble offrir le meilleur compromis en termes de performance (jeu de mod√©lisation n¬∞2 avec le mod√®le SVR).

                     
                    Les mod√®les Random Forest obtiennent de bons r√©sultats d‚Äôerreur quadratique, malheureusement, l‚Äô√©cart des R¬≤ est trop important signe de surapprentissage.

                    """)
        st.write("")
        st.write("")

    if st.button("Evaluation graphique du mod√®le") :
        
        #Courbe d'apprentissage
        st.subheader("Courbe d'apprentissage du mod√®le")
        # ins√©rer la courbe d'apprentissage

        image_apprentissage = "https://zupimages.net/up/24/11/m3js.png"

        st.image(image_apprentissage, use_column_width=True)

        st.markdown("""
                    ##### Points √† retenir :         
                    - Mod√®le qui s'ajuste au fur √† mesure aux donn√©es d'entrainement.
                    - Pas de soup√ßon d'overfitting
                    """)
        
        st.write("")
        st.write("")

        #QQplot, residu et prediction vs vraies
        st.subheader("Graphique des r√©sidus et QQ-plot")
        # ins√©rer qqplot et r√©sidu
        image_qqplot = "https://zupimages.net/up/24/11/n6me.png"

        st.image(image_qqplot, use_column_width=True)

        st.write("")
        st.write("")

        st.markdown("""
                    ##### Points √† retenir :      
                    - Distribution relativement centr√©e autour de 0 et entre -2.5 et 2.5
                    - Quelques valeurs extr√™mes.

                    """)
        
        st.write("")
        st.write("")


    if st.button("Features importance") :
        
        st.markdown("""
                    Le SVR n'ayant pas de Features importance, nous allons pr√©senter ceux du RandomForestRegressor, un mod√®le qui donne aussi des r√©sultats tr√®s satisfaisant.
                    """
                    )

        # Visualiser les importances des caract√©ristiques
        st.subheader("Importance des variables du RandomForestRegressor")
        
        # ins√©rer le graphe
        image_importances = "https://zupimages.net/up/24/11/82nd.png"

        st.image(image_importances, use_column_width=True)
        st.markdown("""
                    On remarque que la variable la plus importante est le ratio_cadre qui repr√©sente 70% pour le mod√®le.
                    """)
        
if page == pages[4] :
    df=pd.read_csv("df_full_full_catpos.csv")
    st.image('pred_banner.png', use_column_width=True)
    st.write('### Qui a le salaire le plus √©lev√© ?')
    #st.image('regis_banner.png', use_column_width=True)
    #st.image('daphne_banner.png', use_column_width=True)
    commune_chargee = "Amb√©rieu-en-Bugey"
    genre_charge = "H"
    cat_chargee = "Ouvrier"
    age_charge = 18

    with st.expander("Cas n¬∞ 1"):
    # Ajoutez du contenu √† l'int√©rieur de la zone d√©pliante
        #st.write("<p style='font-size:20px;'>R√©gis</p>", unsafe_allow_html=True)
        st.write("<div style='text-align: center;font-size:50px;'>üë®üèΩ‚Äçüíº5Ô∏è‚É£5Ô∏è‚É£ üë®üèΩ‚Äçüíª üëë</div>", unsafe_allow_html=True)
        checkbox_1 = st.checkbox("Qui est cette personne ?",key="checkbox_1")
        # Si la case √† cocher est coch√©e, afficher du texte suppl√©mentaire
        if checkbox_1:
            st.write("R√©gis est un CTO de 55 ans qui vit √† Versailles dans les Yvelines")
            if st.button("Charger les caract√©ristiques de R√©gis"):
            # Charger la valeur "Versailles" dans le champ de s√©lection
                commune_chargee = "Versailles"
                genre_charge = "H"
                age_charge = 55
                cat_chargee = "Cadre sup√©rieur"

    
    with st.expander("Cas n¬∞ 2"):
    # Ajoutez du contenu √† l'int√©rieur de la zone d√©pliante
        #st.write("<p style='font-size:20px;'>R√©gis</p>", unsafe_allow_html=True)
        st.write("<div style='text-align: center;font-size:50px;'>üôã‚Äç‚ôÄÔ∏è2Ô∏è‚É£7Ô∏è‚É£ üë∑‚Äç‚ôÄÔ∏è üåû</div>", unsafe_allow_html=True)
        checkbox_2 = st.checkbox("Qui est cette personne ?",key="checkbox_2")
        # Si la case √† cocher est coch√©e, afficher du texte suppl√©mentaire
        if checkbox_2:
            st.write("Daphn√© a 27 ans et est ouvri√®re sur des chantiers, elle vit √† Montastruc-la-Conseill√®re en Haute-Garronne")
            if st.button("Charger les caract√©ristiques de Daphn√©"):
            # Charger la valeur "Versailles" dans le champ de s√©lection
                commune_chargee = "Montastruc-la-Conseill√®re"
                genre_charge = "F"
                age_charge = 27
                cat_chargee = "Ouvrier"

    st.write('### Entrez les caract√©ristiques de la personne')

    df = pd.read_csv('df_full_full_propcadre.csv')
    df.drop_duplicates(inplace=True)
    df.rename(columns = {'LIBGEO' : 'nom_commune'}, inplace = True)
    dfcad = pd.read_csv('prop_cadre.csv')
    dfcad.drop_duplicates(subset=["nom_commune"], keep= 'first', inplace= True)
    dfcad1 = df.merge(dfcad, on = 'nom_commune', how = 'left')
    dfter = pd.read_csv('prop_tertiaire.csv')
    dfter.rename(columns = {'LIBGEO' : 'nom_commune'}, inplace = True)
    dfter.drop_duplicates(subset=["nom_commune"], keep= 'first', inplace= True)
    dftot = dfcad1.merge(dfter, on = 'nom_commune', how = 'left')
    dftot.dropna(inplace = True)
    df = dftot
    df.DEP = df.DEP.replace("2A","222")
    df.DEP = df.DEP.replace("2B","223")
    df_debase = df
    df = df.drop(['nom_commune',"CODGEO",'nom_DEP','nom_REG','nom_commune',"Departement"],axis=1)
    df_debase = df_debase.drop(['nom_DEP','nom_REG',"Departement",'salaire_moyen'],axis=1)
    X = df.drop('salaire_moyen', axis=1) 
    y = df['salaire_moyen']

    def charger_modele():
    # Charger le mod√®le √† partir du fichier Pickle
        with open('modele2.pkl', 'rb') as fichier_modele:
            modele = pickle.load(fichier_modele)
        return modele

    liste_ville = df_debase["nom_commune"].drop_duplicates().tolist()
    liste_genre = ["H","F"]
    liste_cat = ["Cadre sup√©rieur", "Cadre","Travailleur","Ouvrier"]
    commune = st.selectbox('Ville', options=liste_ville, index=liste_ville.index(commune_chargee))
    genre = st.selectbox('Sexe',options=liste_genre, index=liste_genre.index(genre_charge))
    age = st.number_input('Votre √¢ge', min_value= 18 ,step = 1,value=age_charge)
    cat_poste = st.selectbox('Type Poste',options=liste_cat,index=liste_cat.index(cat_chargee) )
    if cat_poste=="Cadre sup√©rieur":
        cat_poste = "cadre sup"
    if cat_poste=="Cadre":
        cat_poste="cadre"
    if cat_poste=="Travailleur" :
        cat_poste = "travailleur"
    if cat_poste =="Ouvrier":
        cat_poste="ouvrier"
    ma_ligne = df_debase.loc[df_debase["nom_commune"]==commune]

    #traitement du genre
    if genre != "":
        if genre == "F" :
            ma_ligne["ratio_homme"] = 0
            ma_ligne["ratio_femme"] = 1
        elif genre =="H":
            ma_ligne["ratio_femme"] = 0
            ma_ligne["ratio_homme"] = 1
        
    ma_ligne = df_debase.loc[df_debase["nom_commune"]==commune]
 
    ma_ligne["age_moyen"]=age

    ma_ligne=ma_ligne.drop(["nom_commune","CODGEO"],axis=1)    
    X = pd.concat([X, ma_ligne], ignore_index=True)

    scaler = StandardScaler()
    X_scaled_predict = scaler.fit_transform(X)
    ma_ligne = X_scaled_predict[-1]

    #JOUER LA PREDICTION
    caracteristiques = [ma_ligne]

    # Pr√©voir la classe avec le mod√®le
    modele = charger_modele()
    prediction_MLville = modele.predict(caracteristiques)
    st.write('##### Pr√©diction avec mod√®le de ML 02 (le + performant mais caract√©ristiques ville)')
    st.write(f"Le salaire pr√©dit est <span style='font-size: 24px;color: green;'>{round(prediction_MLville[0], 2)} ‚Ç¨/h</span> soit environ <span style='font-size: 24px;color: green'>{round(prediction_MLville[0]*4.5*35, 2)} ‚Ç¨/mois</span>", unsafe_allow_html=True)
    st.slider('', min_value=6.0, max_value=60.0, value=prediction_MLville[0], step=1.0)

    #2√®me mod√®le
    df=pd.read_csv("df_full_full_catpos.csv")
    df.drop_duplicates(inplace=True)
    df_debase = df
    df_debase = df_debase.drop(['nom_DEP','nom_REG','salaire_moyen'],axis=1)
    df=df.drop(['CODGEO', 'LIBGEO',"nom_REG", 'nom_DEP'],axis=1)

    X = df.drop('salaire_moyen', axis=1) 
    y = df['salaire_moyen']
    def charger_modele():
        # Charger le mod√®le √† partir du fichier Pickle
        with open('modele.pkl', 'rb') as fichier_modele:
            modele = pickle.load(fichier_modele)
        return modele

    X=df.drop('salaire_moyen', axis=1) 
    ma_ligne = df_debase.loc[df_debase["LIBGEO"]==commune].iloc[[0]]

    if genre == "H" :
        ma_ligne["genre"]=1
    if genre == "F" :
        ma_ligne["genre"]=2

    if cat_poste == "cadre sup":
        ma_ligne["cat_poste"]=4
    if cat_poste == "cadre":
        ma_ligne["cat_poste"]=3
    if cat_poste == "travailleur":
        ma_ligne["cat_poste"]=2
    if cat_poste == "ouvrier":
        ma_ligne["cat_poste"]=1
    
    ma_ligne=ma_ligne.drop(["LIBGEO","CODGEO"],axis=1)    
    X = pd.concat([X, ma_ligne], ignore_index=True)

    scaler = StandardScaler()
    X_scaled_predict = scaler.fit_transform(X)
    ma_ligne = X_scaled_predict[-1]

    #JOUER LA PREDICTION
    caracteristiques = [ma_ligne]

    # Pr√©voir la classe avec le mod√®le
    modele = charger_modele()
    prediction_MLind = modele.predict(caracteristiques)
    st.write('##### Pr√©diction avec mod√®le de ML 04 (caract√©ristiques individu)')
    st.write(f"Le salaire pr√©dit est <span style='font-size: 24px;color: green;'>{round(prediction_MLind[0],2)} ‚Ç¨/h</span> soit environ <span style='font-size: 24px;color: green'>{round((prediction_MLind[0]*4.5*35),2)} ‚Ç¨/mois</span>", unsafe_allow_html=True)
    st.slider('', min_value=6.0, max_value=60.0, value=prediction_MLind[0], step=1.0)

    #Pr√©diction moulinette
    dfsal = pd.read_csv("net_salary_per_town_categories.csv")

    def devine_salaire(genre, ville, age, profession,dep="") :
        dfsal = pd.read_csv("net_salary_per_town_categories.csv")
        dfsal= dfsal.rename(columns={'SNHMFC14': 'Salaire_cadre_F',
                          "SNHMFP14":"Salaire_cadremoy_F",
                          "SNHMFE14":"Salaire_employe_F",
                          "SNHMFO14":"Salaire_travailleur_F",
                          "SNHMHC14":'Salaire_cadre_H',
                          "SNHMHP14":"Salaire_cadremoy_H",
                          "SNHMHE14":"Salaire_employe_H",
                          "SNHMHO14":"Salaire_travailleur_H",
                          "SNHMF1814":"Salaire_F_18-25",
                          "SNHMF2614":"Salaire_F_26-50",
                          "SNHMF5014":"Salaire_F_50",
                          "SNHMH1814":"Salaire_H_18-25",
                          "SNHMH2614":"Salaire_H_26-50",
                          "SNHMH5014":"Salaire_H_50",
                        "SNHM1814":"Salaire_ALL_18-25",
                                 "SNHM2614":"Salaire_ALL_26-50",
                                 "SNHM5014":"Sallaire_ALL_50",
                                 "SNHMF14":"Salaire_F",
                                 "SNHMH14":"Salaire_H",
                                 "SNHM14":"Salaire_ALL",
                                 "SNHMC14":"Salaire_ALL_cadre",
                                 "SNHMP14":"Salaire_ALL_cadremoy",
                                 "SNHME14":"Salaire_ALL_employe",
                                 "SNHMO14":"Salaire_ALL_travailleur"
                         })
        doublon = dfsal[dfsal["LIBGEO"].duplicated()][["LIBGEO","CODGEO"]]
        doublon["dep"]=doublon.CODGEO.str.slice(0, 2)
        dfsal["dep"]=dfsal.CODGEO.str.slice(0, 2)

        ##cadre = 4
        ##cadre moyen = 3
        ##employe = 2
        ##travailleur = 1
        if ville in doublon.LIBGEO.values and dep=="":
            raise ValueError("Ville en doublon, pr√©cisez le num√©ro de d√©partement")
        elif ville in doublon.LIBGEO.values :
            CODGEO = dfsal[(dfsal.LIBGEO == ville)&(dfsal.dep == dep)].CODGEO.values[0]
            #print(CODGEO)
            ma_ville = dfsal[dfsal.CODGEO == CODGEO]
        else:
            ma_ville = dfsal[dfsal.LIBGEO == ville]

        #traitement des professions
        if profession == 4 :
            prof = "cadre"
        elif profession ==3 :
            prof = "cadremoy"
        elif profession ==2:
            prof = "employe"
        elif profession == 1 :
            prof = "travailleur"

        #traitement des ages
        if age <26 :
            groupe = "18-25"
        elif age <51:
            groupe = "26-50"
        elif age > 50 :
            groupe = "50"

       #cr√©ation des noms de colonnes
        col1 = "Salaire_"+prof+"_"+genre
        col2 = "Salaire_"+genre+"_"+groupe

        ma_ville = ma_ville[[col1,col2]]

        #print(ma_ville)
        return((2*ma_ville.iloc[0,0]+ma_ville.iloc[0,1])/3)
    
    if cat_poste == "cadre sup":
        cat_poste=4
    if cat_poste == "cadre":
        cat_poste=3
    if cat_poste == "travailleur":
        cat_poste=2
    if cat_poste == "ouvrier":
        cat_poste=1
    
    #pr√©diction
    prediction_moyenne_fonction=round(devine_salaire(genre, commune, age, cat_poste),2)
    st.write('##### Pr√©diction avec une fonction')
    st.write(f"Le salaire pr√©dit est <span style='font-size: 24px;color: green;'>{prediction_moyenne_fonction} ‚Ç¨/h</span> soit environ <span style='font-size: 24px;color: green'>{round((prediction_moyenne_fonction*4.5*35),2)} ‚Ç¨/mois</span>", unsafe_allow_html=True)
    st.slider('', min_value=6.0, max_value=60.0, value=prediction_moyenne_fonction, step=1.0)

if page == pages[5] :
    st.header("üìå Conclusion")
    st.markdown("""<style>h3{color: #27dce0; font-size: 30px; /* Changez la couleur du titre h3 ici */}</style>""",unsafe_allow_html=True)
    st.markdown("""<style>body {background-color: #f4f4f4;</style>""",unsafe_allow_html=True)
    
    st.subheader("Comment s'explique les diff√©rences de salaire en France ?")
    st.write("L'√éle de France concentre le plus grand nombre d'entreprises, la plus grande densit√© mais aussi la plus grande proportion de cadre. C'est cette variable qui semble tirer les salaires vers le haut.")
    st.write("Sur un march√© de l'emploi tendu, on peut logiquement comprendre que les salaires des cadres seront donc vus √† la hausse pour attirer les talents.")

    st.subheader("Comment gagner un salaire haut en France ?")

    with st.expander("R√©ponse 1"):
        st.write("<div style='text-align: center;font-size:50px;'>üèôÔ∏è üöá üèõÔ∏è üóº</div>", unsafe_allow_html=True)
        st.write("En habitant dans une ville avec une grande proportion de cadre, id√©alement en √éle de France")

    with st.expander("R√©ponse 2"):
        st.write("<div style='text-align: center;font-size:50px;'>üíº üëî üìä üíª</div>", unsafe_allow_html=True)
        st.write("En √©tant soi-m√™me cadre sup√©rieur ou cadre")

    with st.expander("R√©ponse 3"):
        st.write("<div style='text-align: center;font-size:50px;'>üë® üï∫ üí∞ ü§ë</div>", unsafe_allow_html=True)        
        st.write("En √©tant un homme. A niveau de travail √©gal, l'homme gagne plus.")

    if st.button("C'est termin√©"):
        st.image('question.gif')
